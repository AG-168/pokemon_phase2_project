{"version":3,"file":"userfront-core.js","sources":["../src/store.js","../src/utils.js","../src/user.js","../src/api.js","../src/cookies.js","../src/tokens.js","../src/refresh.js","../src/authentication.js","../src/session.js","../src/url.js","../src/pkce.js","../src/password.js","../src/sso.js","../src/link.js","../src/verificationCode.js","../src/totp.js","../src/logout.js","../src/constants.js","../src/mode.js","../src/user.methods.js","../src/index.js","../src/login.js","../src/saml.js","../src/signup.js"],"sourcesContent":["export const store = {\n  user: {},\n  tokens: {},\n  mode: \"live\",\n};\n","/**\n * This file is for zero-dependency utilities that can\n * be imported by any other file. Don't add any imports\n * to this file other than constants\n */\n\n/**\n * Get the unverified base64 decoded payload of a JWT\n *\n * @param {String} token - JSON Web Token\n * @returns {Object}\n */\nexport function getJwtPayload(token) {\n  try {\n    const encodedPayload = token\n      .split(\".\")[1]\n      .replace(\"-\", \"+\")\n      .replace(\"_\", \"/\");\n    return JSON.parse(atob(encodedPayload));\n  } catch (error) {\n    console.error(\"Problem decoding JWT payload\", error);\n  }\n}\n\n/**\n * Client-side check:\n * Determine whether the given JWT is present and unexpired\n *\n * @param {String} token JSON Web Token\n * @returns {Boolean}\n */\nexport function isJwtLocallyValid(token) {\n  try {\n    // Must be present\n    if (!token) {\n      return false;\n    }\n\n    // Must not be expired\n    const payload = getJwtPayload(token);\n    return new Date(payload.exp * 1000) > new Date();\n  } catch (error) {\n    return false;\n  }\n}\n\nexport function throwFormattedError(error) {\n  if (!error) return;\n  if (typeof error === \"string\") throw new Error(error);\n  if (error?.response?.data?.message) {\n    throw new Error(error.response.data.message);\n  }\n  throw error;\n}\n","import { store } from \"./store.js\";\nimport { getJwtPayload } from \"./utils.js\";\n\n/**\n * Define the store.user object based on the ID token\n */\nexport function setUser() {\n  if (!store.tokens.idToken) {\n    return console.warn(\"Cannot define user: missing ID token\");\n  }\n\n  store.user = store.user || {};\n  const idTokenPayload = getJwtPayload(store.tokens.idToken);\n\n  // Set basic user information properties from ID token\n  const propsToDefine = [\n    \"email\",\n    \"phoneNumber\",\n    \"username\",\n    \"name\",\n    \"image\",\n    \"data\",\n    \"confirmedAt\",\n    \"createdAt\",\n    \"updatedAt\",\n    \"mode\",\n    \"userId\",\n    \"userUuid\",\n    \"tenantId\",\n    \"isConfirmed\",\n  ];\n  for (const prop of propsToDefine) {\n    if (prop === \"update\") return;\n    store.user[prop] = idTokenPayload[prop];\n  }\n}\n\n/**\n * Remove all user information\n */\nexport function unsetUser() {\n  for (const attr in store.user) {\n    if (typeof store.user[attr] !== \"function\") {\n      delete store.user[attr];\n    }\n  }\n}\n\n/**\n * Export the store.user object with the update method added\n */\nexport const user = store.user;\n","import axios from \"axios\";\nimport { store } from \"./store.js\";\n\n// Replace multiple slashes // with single slash / (except in the protocol)\nfunction reduceSlashes(str) {\n  return str.replace(/([^:]\\/)\\/+/g, \"$1\");\n}\n\n/**\n * Perform a GET request\n * @param {String} path\n * @param {Object} options\n * @returns {Object} response body\n */\nexport async function get(path, options) {\n  const url = reduceSlashes(`${store.baseUrl}${path}`);\n  return axios.get(url, options);\n}\n\n/**\n * Perform a POST request\n * @param {String} path\n * @param {Object} payload\n * @param {Object} options\n * @returns {Object} response body\n */\nexport async function post(path, payload, options) {\n  const url = reduceSlashes(`${store.baseUrl}${path}`);\n  return axios.post(url, payload, options);\n}\n\n/**\n * Perform a PUT request\n * @param {String} path\n * @param {Object} payload\n * @param {Object} options\n * @returns {Object} response body\n */\nexport async function put(path, payload, options) {\n  const url = reduceSlashes(`${store.baseUrl}${path}`);\n  return axios.put(url, payload, options);\n}\n\nexport default {\n  get,\n  post,\n  put,\n};\n","import Cookies from \"js-cookie\";\nimport { store } from \"./store.js\";\nimport { setTokensFromCookies, unsetTokens } from \"./tokens.js\";\n\n/**\n * Set a cookie value based on the given options.\n * @param {String} value\n * @param {Object} options\n * @param {String} type\n */\nexport function setCookie(value, options, type) {\n  const cookieName = `${type}.${store.tenantId}`;\n  options = options || {\n    secure: store.mode === \"live\",\n    sameSite: \"Lax\",\n  };\n  if (type === \"refresh\") {\n    options.sameSite = \"Strict\";\n  }\n  Cookies.set(cookieName, value, options);\n}\n\n/**\n * Remove a cookie by name, regardless of its cookie setting(s).\n * @param {String} name\n */\nfunction removeCookie(name) {\n  // Define all possible path and domain combinations\n  let paths, domains;\n  try {\n    const path = window.location.pathname;\n    const hostname = window.location.hostname;\n    const hostnameParts = hostname.split(\".\");\n    const primaryDomain = hostnameParts.slice(-2).join(\".\");\n    paths = [undefined, path, \"/\"];\n    domains = [\n      undefined,\n      hostname,\n      `.${hostname}`,\n      primaryDomain,\n      `.${primaryDomain}`,\n    ];\n  } catch (err) {\n    paths = [undefined, \"/\"];\n    domains = [undefined];\n  }\n\n  // Iterate over paths and domains, and remove cookies if present\n  paths.map((path) => {\n    domains.map((domain) => {\n      const options = {};\n      if (domain) options.domain = domain;\n      if (path) options.path = path;\n      Cookies.remove(name, options);\n    });\n  });\n}\n\n/**\n * Remove all auth cookies (access, id, refresh).\n */\nexport function removeAllCookies() {\n  removeCookie(store.tokens.accessTokenName);\n  removeCookie(store.tokens.idTokenName);\n  removeCookie(store.tokens.refreshTokenName);\n  unsetTokens();\n}\n\n/**\n * Set the cookies from a tokens object, and add to the local store.\n * @param {Object} tokens\n */\nexport function setCookiesAndTokens(tokens) {\n  setCookie(tokens.access.value, tokens.access.cookieOptions, \"access\");\n  setCookie(tokens.id.value, tokens.id.cookieOptions, \"id\");\n  if (tokens.refresh && tokens.refresh.value) {\n    setCookie(tokens.refresh.value, tokens.refresh.cookieOptions, \"refresh\");\n  }\n  setTokensFromCookies();\n}\n","import Cookies from \"js-cookie\";\nimport { store } from \"./store.js\";\nimport { setUser, unsetUser } from \"./user.js\";\nimport { refresh } from \"./refresh.js\";\nimport { isJwtLocallyValid } from \"./utils.js\";\n\nstore.tokens = store.tokens || {};\nstore.tokens.refresh = refresh;\n\nexport function setTokenNames() {\n  store.tokens = store.tokens || {};\n  store.tokens.accessTokenName = `access.${store.tenantId}`;\n  store.tokens.idTokenName = `id.${store.tenantId}`;\n  store.tokens.refreshTokenName = `refresh.${store.tenantId}`;\n}\n\n/**\n * Set and then return the access token\n */\nexport function accessToken() {\n  store.tokens.accessToken = Cookies.get(store.tokens.accessTokenName);\n  return store.tokens.accessToken;\n}\n\n/**\n * Set and then return the ID token\n */\nexport function idToken() {\n  store.tokens.idToken = Cookies.get(store.tokens.idTokenName);\n  return store.tokens.idToken;\n}\n\n/**\n * Define the store token values from the cookie values.\n */\nexport function setTokensFromCookies() {\n  const tokenNames = [\"access\", \"id\", \"refresh\"];\n  tokenNames.map((tokenName) => {\n    try {\n      const token = Cookies.get(store.tokens[`${tokenName}TokenName`]);\n      store.tokens[`${tokenName}Token`] = token;\n\n      // Set the user object whenever the ID token is set\n      if (tokenName === \"id\" && token) {\n        setUser();\n      }\n    } catch (error) {\n      console.warn(`Problem setting ${tokenName} token.`);\n    }\n  });\n}\n\n/**\n * Set the store token values to undefined\n */\nexport function unsetTokens() {\n  store.tokens.accessToken = undefined;\n  store.tokens.idToken = undefined;\n  store.tokens.refreshToken = undefined;\n  unsetUser();\n}\n\n/**\n * Client-side check:\n * Determine whether the access token is present and unexpired\n * @returns {Boolean}\n */\nexport function isAccessTokenLocallyValid() {\n  return isJwtLocallyValid(store.tokens.accessToken);\n}\n\n/**\n * Client-side check:\n * Determine whether the refresh token is present and unexpired\n * @returns {Boolean}\n */\nexport function isRefreshTokenLocallyValid() {\n  return isJwtLocallyValid(store.tokens.refreshToken);\n}\n\n/**\n * Export the store.tokens object\n */\nexport const tokens = store.tokens;\n\n// NOTE Commenting this out 6/11/21 because the packages it relies on (jsonwebtoken & jwks-rsa)\n// both cause a lot of bloat. If we want to verify tokens, this is a nice way to do it, but\n// we need to find libraries designed for the browser instead of node.\n/**\n * Verify the provided token\n * @param {String} token\n * @returns {Promise<void>} The provided token has been verified if `verifyToken` resolves without error\n */\n// export async function verifyToken(token) {\n//   if (!token) throw new Error(\"Missing token\");\n\n//   let publicKey;\n//   try {\n//     const decodedToken = jwt.decode(token, { complete: true });\n//     if (!decodedToken.header || !decodedToken.header.kid) {\n//       throw new Error(\"Token kid not defined\");\n//     }\n\n//     const client = new JwksClient({\n//       jwksUri: `${apiUrl}tenants/${store.tenantId}/jwks/${store.mode}`,\n//       requestHeaders: { origin: window.location.origin },\n//     });\n\n//     const key = await client.getSigningKey(decodedToken.header.kid);\n//     publicKey = key.getPublicKey();\n//   } catch (error) {\n//     throw error;\n//   }\n\n//   if (!publicKey) {\n//     throw new Error(\"Public key not found\");\n//   }\n\n//   try {\n//     jwt.verify(token, publicKey);\n//   } catch (error) {\n//     throw new Error(\"Token verification failed\");\n//   }\n\n//   return Promise.resolve();\n// }\n","import Cookies from \"js-cookie\";\nimport { get } from \"./api.js\";\nimport { setCookiesAndTokens } from \"./cookies.js\";\nimport { store } from \"./store.js\";\n// import { getIframe, postMessageAsPromise } from \"./iframe.js\";\nimport { throwFormattedError } from \"./utils.js\";\n\n/**\n * Refresh the access and ID tokens\n * - When in test mode, uses the basic refresh method\n * - For tenants without a custom SSL certificate, uses the basic refresh method\n * - For tenants with a custom SSL certificate and in live mode, uses the httpOnly refresh method\n * @returns {Promise}\n */\nexport async function refresh() {\n  try {\n    await basicRefresh();\n  } catch (error) {\n    console.warn(`Refresh failed: ${error.message}`);\n  }\n}\n\n/**\n * Use a regular (non-httpOnly) cookie to refresh the access and ID tokens.\n *\n * The basic refresh method is used automatically in test mode and in live\n * mode whenever an SSL certificate has not been set up.\n */\nasync function basicRefresh() {\n  const refreshToken = Cookies.get(store.tokens.refreshTokenName);\n  try {\n    const { data, status } = await get(`/auth/refresh`, {\n      headers: {\n        authorization: `Bearer ${refreshToken}`,\n      },\n    });\n    if (status !== 200) {\n      throw new Error(data.message || \"Problem with request\");\n    }\n    if (data.tokens) {\n      setCookiesAndTokens(data.tokens);\n      return data;\n    } else {\n      throw new Error(\"Problem setting cookies\");\n    }\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n// TODO re-enable httpOnly refresh method once new endpoints are stable [06/15/21]\n/**\n *\n * The httpOnly refresh method is only available for tenants with configured\n * SSL certificates while in live mode.\n */\n// async function httpOnlyRefresh() {\n//   const iframe = getIframe();\n//   if (!iframe) return;\n//   return postMessageAsPromise({\n//     type: \"refresh\",\n//     tenantId: store.tenantId,\n//   });\n// }\n\n/**\n * Use a sessionId and nonce to set the iframe refresh token\n * @param {String} sessionId\n * @param {String} nonce\n * @returns {Promise}\n */\nexport async function exchange({ sessionId, nonce }) {\n  return;\n\n  // TODO re-enable httpOnly exchange method once new endpoints are stable [06/15/21]\n  // --------------------------\n  // const iframe = getIframe();\n  // if (!iframe) return;\n  // return postMessageAsPromise({\n  //   type: \"exchange\",\n  //   tenantId: store.tenantId,\n  //   payload: {\n  //     sessionId,\n  //     nonce,\n  //   },\n  // });\n}\n","import { store } from \"./store.js\";\n\n// Data specific to the MFA service\nexport const authenticationData = {\n  firstFactors: [],\n  secondFactors: [],\n  firstFactorToken: null,\n};\n\n/**\n * Set authenticationData.firstFactors from the authentication object\n * @param {Object} authentication\n * {\n *   firstFactors,\n *   secondFactors\n * }\n * @returns\n */\nexport function setFirstFactors(authentication) {\n  // If we're not initialized, there are no first factors.\n  if (!store.tenantId) {\n    console.warn(\n      \"setFirstFactors: tried to set factors without a tenantId set.\"\n    );\n    return;\n  }\n  // If we're passed an invalid argument, keep the authentication data as is.\n  if (\n    !authentication ||\n    typeof authentication !== \"object\" ||\n    !Array.isArray(authentication.firstFactors)\n  ) {\n    console.warn(\"setFirstFactors: invalid factors passed.\");\n    return;\n  }\n  authenticationData.firstFactors = authentication.firstFactors;\n}\n\n/**\n * Check if MFA is required for the ongoing signup or login flow.\n * @returns {Boolean} true if MFA is currently required\n */\nexport function isMfaRequired() {\n  return !!authenticationData.firstFactorToken;\n}\n\n/**\n * Update the MFA service state given a response to a signup or login call.\n * Adds secondFactors and firstFactorToken if it is a MFA Required response,\n * removes them if it is a successful signup or login,\n * leaves the service unchanged otherwise.\n * @param {Object} response\n */\nexport function handleMfaRequired(response) {\n  if (!response.isMfaRequired) {\n    // If we've logged in or signed up successfully,\n    // clear the MFA service state.\n    if (response.message === \"OK\") {\n      clearMfa();\n    }\n    return;\n  }\n  authenticationData.secondFactors = response.authentication.secondFactors;\n  authenticationData.firstFactorToken = response.firstFactorToken;\n}\n\n/**\n * If MFA is required, returns a headers object with authorization set to the firstFactorToken.\n * Otherwise, returns an empty object.\n * @returns {Object} a headers object with MFA authorization header set, or empty if MFA is not required\n */\nexport function getMfaHeaders() {\n  if (authenticationData.firstFactorToken) {\n    return {\n      authorization: `Bearer ${authenticationData.firstFactorToken}`,\n    };\n  }\n  return {};\n}\n\n/**\n * Clears the current transient state of the MFA service,\n * leaving the tenant's persistent state in place.\n */\nexport function clearMfa() {\n  authenticationData.secondFactors = [];\n  authenticationData.firstFactorToken = null;\n}\n\n/**\n * Fully resets the MFA service, including the tenant's persistent state,\n * to it uninitialized state.\n */\nexport function resetMfa() {\n  clearMfa();\n  authenticationData.firstFactors = [];\n}\n","import {\n  isAccessTokenLocallyValid,\n  isRefreshTokenLocallyValid,\n} from \"./tokens.js\";\nimport {\n  authenticationData,\n  isMfaRequired,\n  clearMfa,\n} from \"./authentication.js\";\nimport { refresh } from \"./refresh.js\";\n\n/**\n * Determine whether a user is logged in by checking their\n * JWT access token and, if invalid, refreshing it and checking\n * again.\n * @returns {Promise<Boolean>}\n */\nasync function getIsLoggedIn() {\n  try {\n    // If the access token is locally valid, return true\n    if (isAccessTokenLocallyValid()) {\n      return true;\n    }\n\n    // If the refresh token is locally invalid, return false\n    if (!isRefreshTokenLocallyValid()) {\n      return false;\n    }\n\n    // Attempt to refresh the access token\n    await refresh();\n\n    // The access token should now be valid\n    return isAccessTokenLocallyValid();\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Return detailed information about the current session.\n * @returns {Promise<Object>}\n */\nexport async function getSession() {\n  const isLoggedIn = await getIsLoggedIn();\n  return {\n    isLoggedIn,\n    needsSecondFactor: isMfaRequired(),\n    firstFactors: authenticationData.firstFactors,\n    secondFactors: authenticationData.secondFactors,\n    resetMfaState: clearMfa,\n  };\n}\n","import { get } from \"./api.js\";\nimport { store } from \"./store.js\";\nimport { removeAllCookies } from \"./cookies.js\";\nimport { getSession } from \"./session.js\";\n\n/**\n * Get the value of a query attribute, e.g. ?attr=value\n * @param {String} attrName\n */\nexport function getQueryAttr(attrName) {\n  if (\n    typeof window !== \"object\" ||\n    typeof window.location !== \"object\" ||\n    !window.location.href ||\n    window.location.href.indexOf(`${attrName}=`) < 0\n  ) {\n    return;\n  }\n  return decodeURIComponent(\n    window.location.href.split(`${attrName}=`)[1].split(\"&\")[0]\n  );\n}\n\n/**\n * Redirect the browser based on explicit redirect input path, or the API response\n * @property {String|Boolean} redirect A path to redirect to, or false to not redirect\n * @property {Object} data The response object from the API\n * @returns\n */\nexport const handleRedirect = ({ redirect, data }) => {\n  if (redirect === false) return;\n  const path = redirect || getQueryAttr(\"redirect\") || data.redirectTo || \"/\";\n  redirectToPath(path);\n};\n\n/**\n * If the access token is valid, redirect the browser to the\n * tenant's After-login path.\n */\nexport async function redirectIfLoggedIn({ redirect } = {}) {\n  const { isLoggedIn } = await getSession();\n  if (!isLoggedIn) {\n    return removeAllCookies();\n  }\n\n  // Redirect to a provided path (check options first, then url querystring)\n  if (redirect) {\n    return redirectToPath(redirect);\n  } else if (getQueryAttr(\"redirect\")) {\n    return redirectToPath(getQueryAttr(\"redirect\"));\n  }\n\n  // If no path was provided, look up the path and then redirect there\n  try {\n    const { data } = await get(`/self`, {\n      headers: {\n        authorization: `Bearer ${store.tokens.accessToken}`,\n      },\n    });\n    if (data.tenant && data.tenant.loginRedirectPath) {\n      redirectToPath(data.tenant.loginRedirectPath);\n    }\n  } catch (err) {\n    removeAllCookies();\n  }\n}\n\n/**\n * If the access token is invalid, redirect the browser to the\n * provided path.\n */\nexport async function redirectIfLoggedOut({ redirect } = {}) {\n  // If the user is logged in, return without doing anything\n  const { isLoggedIn } = await getSession();\n  if (isLoggedIn) {\n    return;\n  }\n\n  // Remove all cookies\n  removeAllCookies();\n\n  // Redirect to a provided path (check options first, then url querystring)\n  if (redirect) {\n    return redirectToPath(redirect);\n  } else if (getQueryAttr(\"redirect\")) {\n    return redirectToPath(getQueryAttr(\"redirect\"));\n  }\n\n  // If no redirect path was provided, do not redirect\n  return;\n}\n\n/**\n * Redirect to path portion of a URL.\n */\nexport function redirectToPath(pathOrUrl) {\n  // Return if no pathOrUrl, or if SSR or mobile\n  if (\n    !pathOrUrl ||\n    typeof document !== \"object\" ||\n    typeof window !== \"object\"\n  ) {\n    return;\n  }\n  try {\n    document && window;\n  } catch (error) {\n    return;\n  }\n\n  // Perform hard redirect\n  const el = document.createElement(\"a\");\n  el.href = pathOrUrl;\n  let path = `${el.pathname}${el.hash}${el.search}`;\n  if (el.pathname !== window.location.pathname) {\n    window.location.assign(path);\n  }\n}\n","import { getQueryAttr } from \"./url.js\";\n\nexport const store = {\n  codeChallenge: \"\",\n  get usePkce() {\n    return !!store.codeChallenge;\n  }\n}\n\n/**\n * Reads an unexpired challenge code from local storage\n * @returns {string?} the challenge code, if an unexpired one is in local storage\n */\nexport function readPkceDataFromLocalStorage() {\n  const codeChallenge = window.localStorage.getItem(\"uf_pkce_code_challenge\");\n  if (codeChallenge) {\n    const expiresAt = window.localStorage.getItem(\"uf_pkce_code_challenge_expiresAt\");\n    if (expiresAt && (parseInt(expiresAt, 10) > Date.now())) {\n      return codeChallenge;\n    }\n  }\n}\n\n/**\n * Write a challenge code to local storage, expiring in 5 minutes\n * @param {string} codeChallenge \n * @returns \n */\nexport function writePkceDataToLocalStorage(codeChallenge) {\n  if (!codeChallenge) {\n    return clearPkceDataFromLocalStorage();\n  }\n  store.codeChallenge = codeChallenge;\n  const expiresAt = (Date.now() + 1000 * 60 * 5); // 5 minutes from now\n  try {\n    window.localStorage.setItem(\"uf_pkce_code_challenge\", codeChallenge);\n    window.localStorage.setItem(\"uf_pkce_code_challenge_expiresAt\", expiresAt);\n  } catch (err) {\n    // Suppress exception from full local storage\n  }\n}\n\n/**\n * Clear the challenge code and expiration from local storage\n */\nexport function clearPkceDataFromLocalStorage() {\n  window.localStorage.removeItem(\"uf_pkce_code_challenge\");\n  window.localStorage.removeItem(\"uf_pkce_code_challenge_expiresAt\");\n}\n\n/**\n * Set up the PKCE service: look for a PKCE challenge code in\n * query params or local storage. If both are present, the query\n * param is preferred.\n * @returns {Boolean} true if we should use PKCE in our auth requests\n */\nexport function setupPkce() {\n  const codeChallengeFromQueryParams = getQueryAttr(\"code_challenge\");\n  if (codeChallengeFromQueryParams) {\n    store.codeChallenge = codeChallengeFromQueryParams;\n    writePkceDataToLocalStorage(codeChallengeFromQueryParams);\n    return true;\n  }\n  const codeChallengeFromLocalStorage = readPkceDataFromLocalStorage();\n  if (codeChallengeFromLocalStorage) {\n    store.codeChallenge = codeChallengeFromLocalStorage;\n    return true;\n  }\n  clearPkceDataFromLocalStorage();\n  return false;\n}\n\n/**\n * Get (possibly empty) PKCE query params to attach to an auth request\n * @returns {object} an object to be used for an Axios request's params field\n */\nexport function getPkceRequestQueryParams() {\n  if (!store.usePkce) {\n    return {};\n  }\n  return { \"code_challenge\": store.codeChallenge };\n}\n\n/**\n * Redirect to url with PKCE query params (authorization_code) set. Does not redirect\n * if url or authorizationCode are falsy.\n * \n * @param {string} url full URL to redirect to (may be a deep link for a mobile app)\n * @param {string} authorizationCode the authorization code received from the server\n * @returns \n */\nexport function redirectWithPkce(url, authorizationCode) {\n  if (!url || !authorizationCode) {\n    return;\n  }\n  if (!store.usePkce) {\n    console.warn(\"Redirecting with a PKCE authorization code, but no PKCE challenge code is present in the client. This is unexpected.\")\n  }\n  const _url = new URL(url);\n  _url.searchParams.set(\"authorization_code\", authorizationCode);\n  clearPkceDataFromLocalStorage();\n  window.location.assign(_url.href);\n}","import { post, put } from \"./api.js\";\nimport { setCookiesAndTokens } from \"./cookies.js\";\nimport { store } from \"./store.js\";\nimport { getQueryAttr, handleRedirect } from \"./url.js\";\nimport { throwFormattedError } from \"./utils.js\";\nimport { exchange } from \"./refresh.js\";\nimport {\n  getMfaHeaders,\n  handleMfaRequired,\n  clearMfa,\n} from \"./authentication.js\";\nimport { getPkceRequestQueryParams, redirectWithPkce } from \"./pkce.js\";\n\n/**\n * Register a new user with username, name, email, and password.\n * Redirect the browser after successful signup based on the redirectTo value returned.\n * @param {String} username\n * @param {String} name\n * @param {String} email\n * @param {String} password\n * @param {Object} userData - alias for the user.data object, since \"data\" is used in the response\n * @param {String} redirect - do not redirect if false, or redirect to a specific path\n */\nexport async function signupWithPassword({\n  username,\n  name,\n  email,\n  password,\n  userData,\n  redirect,\n} = {}) {\n  try {\n    const { data } = await post(\n      `/auth/create`,\n      {\n        tenantId: store.tenantId,\n        username,\n        name,\n        email,\n        password,\n        data: userData,\n      },\n      {\n        headers: getMfaHeaders(),\n        params: getPkceRequestQueryParams(),\n      }\n    );\n    if (data.tokens) {\n      clearMfa();\n      setCookiesAndTokens(data.tokens);\n      await exchange(data);\n      handleRedirect({ redirect, data });\n      return data;\n    } else if (data.firstFactorToken) {\n      handleMfaRequired(data);\n      return data;\n    } else if (data.authorizationCode) {\n      const url = redirect || data.redirectTo;\n      if (url) {\n        redirectWithPkce(url, data.authorizationCode);\n      } else {\n        // We can't exchange the authorizationCode for tokens, because we don't have the verifier code\n        // that matches our challenge code.\n        throw new Error(\"Received a PKCE (mobile auth) response from the server, but no redirect was provided. Please set the redirect to the app that initiated the request.\")\n      }\n    } else {\n      throw new Error(\"Please try again.\");\n    }\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Log a user in with email/username and password.\n * Redirect the browser after successful login based on the redirectTo value returned.\n * @param {Object} params\n * @param {string} params.email The user's email. One of email/username/emailOrUsername should be present.\n * @param {string} params.username The user's username. One of email/username/emailOrUsername should be present.\n * @param {string} params.emailOrUsername Either the user's email or username. One of email/username/emailOrUsername should be present.\n * @param {string} params.password\n * @param {string | boolean} params.redirect \n *  URL to redirect to after login, or false to suppress redirect. Otherwise, redirects to the after-login path set on the server.\n * @param {object} params.options\n * @param {boolean} params.options.noResetEmail\n *  By default, Userfront sends a password reset email if a user without a password tries to log in with a password.\n *  Set options.noResetEmail = true to override this behavior and return an error instead.\n * \n */\nexport async function loginWithPassword({\n  email,\n  username,\n  emailOrUsername,\n  password,\n  redirect,\n  options\n}) {\n  try {\n    const body = {\n      tenantId: store.tenantId,\n      emailOrUsername: email || username || emailOrUsername,\n      password,\n    };\n    if (options && options.noResetEmail) {\n      body.options = {\n        noResetEmail: true\n      }\n    }\n    const { data } = await post(\n      `/auth/basic`,\n      body,\n      {\n        headers: getMfaHeaders(),\n        params: getPkceRequestQueryParams(),\n      }\n    );\n\n    if (data.hasOwnProperty(\"tokens\")) {\n      setCookiesAndTokens(data.tokens);\n      await exchange(data);\n      handleRedirect({ redirect, data });\n      return data;\n    }\n\n    if (data.hasOwnProperty(\"firstFactorToken\")) {\n      handleMfaRequired(data);\n      return data;\n    }\n\n    if (data.authorizationCode) {\n      const url = redirect || data.redirectTo;\n      if (url) {\n        redirectWithPkce(url, data.authorizationCode);\n        return;\n      } else {\n        // TODO this is neither valid nor invalid\n      }\n    }\n\n    throw new Error(\"Please try again.\");\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Send a password reset link to the provided email.\n * @param {String} email\n */\nexport async function sendResetLink(email) {\n  try {\n    const { data } = await post(`/auth/reset/link`, {\n      email,\n      tenantId: store.tenantId,\n    });\n    return data;\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Set a user's password with their link credentials or JWT access token.\n *\n * If no method is provided, the order is:\n * - Check for link credentials; then\n * - Check for a JWT access token first\n *\n * @property {String} method (optional) \"link\" or \"jwt\"\n * @property {String} password\n * @property {String} existingPassword\n * @property {String} uuid\n * @property {String} token\n * @property {String} redirect\n * @returns\n */\nexport async function updatePassword({\n  method,\n  password,\n  existingPassword,\n  uuid,\n  token,\n  redirect,\n}) {\n  switch (method) {\n    // Allow for explicit setting of method\n    case \"link\":\n      return updatePasswordWithLink({ uuid, token, password, redirect });\n    case \"jwt\":\n      return updatePasswordWithJwt({ password, existingPassword });\n    default:\n      // Default (no method provided) is to look for link credentials first, then JWT access token\n      token = token || getQueryAttr(\"token\");\n      uuid = uuid || getQueryAttr(\"uuid\");\n      if (uuid && token) {\n        return updatePasswordWithLink({ uuid, token, password, redirect });\n      } else if (store.tokens.accessToken) {\n        return updatePasswordWithJwt({ password, existingPassword });\n      } else {\n        throw new Error(\n          \"updatePassword() was called without link credentials (token & uuid) or a JWT access token.\"\n        );\n      }\n  }\n}\n\nexport const resetPassword = updatePassword;\n\nexport async function updatePasswordWithLink({\n  uuid,\n  token,\n  password,\n  redirect,\n}) {\n  try {\n    token = token || getQueryAttr(\"token\");\n    uuid = uuid || getQueryAttr(\"uuid\");\n    if (!token || !uuid) throw new Error(\"Missing token or uuid\");\n    const { data } = await put(`/auth/reset`, {\n      tenantId: store.tenantId,\n      uuid,\n      token,\n      password,\n    });\n    if (data.tokens) {\n      setCookiesAndTokens(data.tokens);\n      handleRedirect({ redirect, data });\n      return data;\n    } else {\n      throw new Error(\n        \"There was a problem resetting your password. Please try again.\"\n      );\n    }\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\nexport async function updatePasswordWithJwt({ password, existingPassword }) {\n  try {\n    if (!store.tokens.accessToken) {\n      throw new Error(\n        `updatePassword({ method: \"jwt\" }) was called without a JWT access token.`\n      );\n    }\n\n    const { data } = await put(\n      `/auth/basic`,\n      {\n        tenantId: store.tenantId,\n        password,\n        existingPassword,\n      },\n      {\n        headers: {\n          Authorization: `Bearer ${store.tokens.accessToken}`,\n        },\n      }\n    );\n\n    return data;\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n","import { store } from \"./store.js\";\nimport { getQueryAttr } from \"./url.js\";\n\nexport function getProviderLink({ provider, redirect }) {\n  if (!provider) throw new Error(\"Missing provider\");\n  if (!store.tenantId) throw new Error(\"Missing tenantId\");\n\n  let url = `${store.baseUrl}auth/${provider}/login?tenant_id=${store.tenantId}&origin=${window.location.origin}`;\n\n  let redirectTo = redirect || getQueryAttr(\"redirect\");\n  if (redirect === false) {\n    redirectTo = typeof document === \"object\" && document.location.pathname;\n  }\n  if (redirectTo) {\n    url += `&redirect=${encodeURIComponent(redirectTo)}`;\n  }\n\n  return url;\n}\n\n/**\n * Log in or register a user via SSO provider.\n * Redirect the browser after successful authentication and 302 redirect from server.\n * @param {String} provider Name of SSO provider\n * @param {String} redirect - do not redirect if false, or redirect to given path\n */\nexport function signonWithSso({ provider, redirect }) {\n  if (!provider) throw new Error(\"Missing provider\");\n  const url = getProviderLink({ provider, redirect });\n  window.location.assign(url);\n}\n","import { post, put } from \"./api.js\";\nimport { setCookiesAndTokens } from \"./cookies.js\";\nimport { store } from \"./store.js\";\nimport { getQueryAttr, handleRedirect } from \"./url.js\";\nimport { exchange } from \"./refresh.js\";\nimport { throwFormattedError } from \"./utils.js\";\nimport {\n  getMfaHeaders,\n  handleMfaRequired,\n  clearMfa,\n} from \"./authentication.js\";\nimport { getPkceRequestQueryParams, redirectWithPkce } from \"./pkce.js\";\n\n/**\n * Log a user in with a token/uuid combo passed into the function or\n * in the URL querystring. ?token=...&uuid=...\n * @param {String} token\n * @param {UUID} uuid\n * @param {String} redirect - do not redirect if false, or redirect to given path\n */\nexport async function loginWithLink({ token, uuid, redirect } = {}) {\n  try {\n    token = token || getQueryAttr(\"token\");\n    uuid = uuid || getQueryAttr(\"uuid\");\n    if (!token || !uuid) return;\n\n    const { data } = await put(\n      \"/auth/link\",\n      {\n        token,\n        uuid,\n        tenantId: store.tenantId,\n      },\n      {\n        headers: getMfaHeaders(),\n        params: getPkceRequestQueryParams()\n      }\n    );\n\n    if (data.hasOwnProperty(\"tokens\")) {\n      clearMfa();\n      setCookiesAndTokens(data.tokens);\n      await exchange(data);\n      handleRedirect({ redirect, data });\n      return data;\n    }\n\n    if (data.hasOwnProperty(\"firstFactorToken\")) {\n      handleMfaRequired(data);\n      return data;\n    }\n\n    if (data.authorizationCode) {\n      const url = redirect || data.redirectTo;\n      if (url) {\n        redirectWithPkce(url, data.authorizationCode);\n        return;\n      } else {\n        // We can't exchange the authorizationCode for tokens, because we don't have the verifier code\n        // that matches our challenge code.\n        throw new Error(\"Received a PKCE (mobile auth) response from the server, but no redirect was provided. Please set the redirect to the app that initiated the request.\")\n      }\n    }\n\n    throw new Error(\"Problem logging in.\");\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Send a login link to the provided email.\n * @param {String} email\n */\nexport async function sendLoginLink(email) {\n  try {\n    const { data } = await post(`/auth/link`, {\n      email,\n      tenantId: store.tenantId,\n    });\n    return data;\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Create or update a user and send them a link to log in.\n * @param {Object} inputs\n */\nexport async function sendPasswordlessLink({\n  email,\n  name,\n  username,\n  userData,\n  options,\n}) {\n  try {\n    const { data } = await post(`/auth/link`, {\n      email,\n      name,\n      username,\n      data: userData,\n      options,\n      tenantId: store.tenantId,\n    });\n    return data;\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n","import { post, put } from \"./api.js\";\nimport { setCookiesAndTokens } from \"./cookies.js\";\nimport { store } from \"./store.js\";\nimport { handleRedirect } from \"./url.js\";\nimport { exchange } from \"./refresh.js\";\nimport { throwFormattedError } from \"./utils.js\";\nimport {\n  getMfaHeaders,\n  handleMfaRequired,\n  clearMfa,\n} from \"./authentication.js\";\nimport { getPkceRequestQueryParams, redirectWithPkce } from \"./pkce.js\";\n\n/**\n * Verify that proper identifier is available for the channel\n * @property {String} channel \"sms\" or \"email\"\n * @property {String} phoneNumber\n * @property {String} email\n */\nfunction enforceChannel({ channel, phoneNumber, email }) {\n  if (channel !== \"sms\" && channel !== \"email\") {\n    throw new Error(\"Invalid channel\");\n  }\n  if (channel === \"sms\" && !phoneNumber) {\n    throw new Error(`SMS verification code requires \"phoneNumber\"`);\n  } else if (channel === \"email\" && !email) {\n    throw new Error(`Email verification code requires \"email\"`);\n  }\n}\n\n/**\n * Send a verification code to the provided email address or phone number.\n * @property {String} channel \"sms\" (default) or \"email\"\n * @property {String} phoneNumber\n * @property {String} email\n * @property {String} name\n * @property {String} username\n * @property {Object} data\n */\nexport async function sendVerificationCode({\n  channel = \"sms\",\n  phoneNumber,\n  email,\n  name,\n  username,\n  data,\n}) {\n  try {\n    enforceChannel({\n      channel,\n      phoneNumber,\n      email,\n    });\n\n    const { data: res } = await post(`/auth/code`, {\n      channel,\n      email,\n      phoneNumber,\n      name,\n      username,\n      data,\n      tenantId: store.tenantId,\n    }, {\n      headers: getMfaHeaders()\n    });\n    return res;\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Log a user in with a token/uuid combo passed into the function or\n * in the URL querystring. ?token=...&uuid=...\n * @param {String} token\n * @param {UUID} uuid\n * @param {String} redirect - do not redirect if false, or redirect to given path\n */\nexport async function loginWithVerificationCode({\n  channel,\n  verificationCode,\n  email,\n  phoneNumber,\n  redirect,\n} = {}) {\n  try {\n    enforceChannel({\n      channel,\n      phoneNumber,\n      email,\n    });\n\n    const { data } = await put(\n      `/auth/code`,\n      {\n        channel,\n        verificationCode,\n        email,\n        phoneNumber,\n        tenantId: store.tenantId,\n      },\n      {\n        headers: getMfaHeaders(),\n        params: getPkceRequestQueryParams(),\n      }\n    );\n\n    if (data.hasOwnProperty(\"tokens\")) {\n      clearMfa();\n      setCookiesAndTokens(data.tokens);\n      await exchange(data);\n      handleRedirect({ redirect, data });\n      return data;\n    }\n\n    if (data.hasOwnProperty(\"firstFactorToken\")) {\n      handleMfaRequired(data);\n      return data;\n    }\n\n    if (data.authorizationCode) {\n      const url = redirect || data.redirectTo;\n      if (url) {\n        redirectWithPkce(url, data.authorizationCode);\n        return;\n      } else {\n        // We can't exchange the authorizationCode for tokens, because we don't have the verifier code\n        // that matches our challenge code.\n        throw new Error(\"Received a PKCE (mobile auth) response from the server, but no redirect was provided. Please set the redirect to the app that initiated the request.\")\n      }\n    }\n\n    throw new Error(\"Problem logging in.\");\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n","import { get, post } from \"./api.js\";\nimport { setCookiesAndTokens } from \"./cookies.js\";\nimport { store } from \"./store.js\";\nimport { handleRedirect } from \"./url.js\";\nimport { exchange } from \"./refresh.js\";\nimport { throwFormattedError } from \"./utils.js\";\nimport {\n  isMfaRequired,\n  getMfaHeaders,\n  handleMfaRequired,\n  clearMfa,\n} from \"./authentication.js\";\nimport { getPkceRequestQueryParams, redirectWithPkce } from \"./pkce.js\";\n\n/**\n * Log a user in with a TOTP authenticator code or a TOTP backup code,\n * plus an identifier for the user (e.g. userId, userUuid, or email)\n *\n * @property {String} totpCode \"123456\"\n * @property {String} backupCode \"aaaaa-bbbbb\"\n * @property {Integer} userId\n * @property {String} userUuid\n * @property {String} emailOrUsername\n * @property {String} email\n * @property {String} username\n * @property {String} phoneNumber\n * @property {String|Boolean} redirect - do not redirect if false, or redirect to given path\n */\nexport async function loginWithTotp({\n  totpCode,\n  backupCode,\n  userId,\n  userUuid,\n  emailOrUsername,\n  email,\n  username,\n  phoneNumber,\n  redirect,\n} = {}) {\n  try {\n\n    const { data } = await post(\n      `/auth/totp`,\n      {\n        totpCode,\n        backupCode,\n        userId,\n        userUuid,\n        emailOrUsername,\n        email,\n        username,\n        phoneNumber,\n        tenantId: store.tenantId,\n      },\n      {\n        headers: getMfaHeaders(),\n        params: getPkceRequestQueryParams(),\n      }\n    );\n\n    if (data.hasOwnProperty(\"tokens\")) {\n      clearMfa();\n      setCookiesAndTokens(data.tokens);\n      await exchange(data);\n      handleRedirect({ redirect, data });\n      return data;\n    }\n\n    if (data.hasOwnProperty(\"firstFactorToken\")) {\n      handleMfaRequired(data);\n      return data;\n    }\n\n    if (data.authorizationCode) {\n      const url = redirect || data.redirectTo;\n      if (url) {\n        redirectWithPkce(url, data.authorizationCode);\n        return;\n      } else {\n        // We can't exchange the authorizationCode for tokens, because we don't have the verifier code\n        // that matches our challenge code.\n        throw new Error(\"Received a PKCE (mobile auth) response from the server, but no redirect was provided. Please set the redirect to the app that initiated the request.\")\n      }\n    }\n\n    throw new Error(\"Problem logging in.\");\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\nexport async function getTotp() {\n  try {\n    if (isMfaRequired()) {\n      const { data } = await get(`/auth/totp`, {\n        headers: getMfaHeaders(),\n      });\n      return data;\n    }\n    if (!store.tokens.accessToken) {\n      throw new Error(`getTotp() was called without a JWT access token.`);\n    }\n\n    const { data } = await get(`/auth/totp`, {\n      headers: {\n        Authorization: `Bearer ${store.tokens.accessToken}`,\n      },\n    });\n\n    return data;\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n","import { get } from \"./api.js\";\nimport { getIframe, postMessageAsPromise } from \"./iframe.js\";\nimport { store } from \"./store.js\";\nimport { removeAllCookies } from \"./cookies.js\";\nimport { setTokensFromCookies } from \"./tokens.js\";\nimport { handleRedirect } from \"./url\";\nimport { throwFormattedError } from \"./utils.js\";\n\n/**\n * Log a user out and redirect to the logout path.\n */\nexport async function logout({ method, redirect } = {}) {\n  if (method === \"saml\") {\n    return completeSamlLogout();\n  }\n  if (!store.tokens.accessToken) {\n    return removeAllCookies();\n  }\n\n  try {\n    const { data } = await get(`/auth/logout`, {\n      headers: {\n        authorization: `Bearer ${store.tokens.accessToken}`,\n      },\n    });\n    removeAllCookies();\n    handleRedirect({ redirect, data });\n  } catch (err) {\n    removeAllCookies();\n  }\n}\n\nasync function completeSamlLogout() {\n  if (!store.tokens.accessToken) {\n    throw new Error(\"Please log in to authorize your logout request.\");\n  }\n\n  try {\n    const { data } = await get(`/auth/saml/idp/token`, {\n      headers: {\n        authorization: `Bearer ${store.tokens.accessToken}`,\n      },\n    });\n\n    window.location.assign(\n      `${store.baseUrl}auth/saml/idp/logout?tenant_id=${store.tenantId}&token=${data.token}&uuid=${store.user.userUuid}`\n    );\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n// TODO re-enable exchange method once new endpoints are stable [06/15/21]\n// --------------------------\n// const iframe = getIframe();\n// if (!iframe) return;\n// try {\n//   const { data } = await postMessageAsPromise({\n//     type: \"logout\",\n//     tenantId: store.tenantId,\n//   });\n//   removeAllCookies();\n//   setTokensFromCookies();\n//   handleRedirect({ redirect, data });\n// } catch (error) {\n//   removeAllCookies();\n//   redirectToPath(\"/\");\n// }\n","export const apiUrl = `https://api.userfront.com/v0/`;\n\nexport const privateIPRegex =\n  /((^127\\.)|(^10\\.)|(^172\\.1[6-9]\\.)|(^172\\.2[0-9]\\.)|(^172\\.3[0-1]\\.)|(^192\\.168\\.))\\d{1,3}\\.\\d{1,3}/g;\n","import { get } from \"./api.js\";\nimport { privateIPRegex } from \"./constants.js\";\nimport { store } from \"./store.js\";\nimport { setFirstFactors } from \"./authentication.js\";\n\n/**\n * Global mode object\n */\nexport const mode = {\n  value: \"live\",\n  reason: undefined,\n  setMode,\n};\n\nsetModeSync();\n\n/**\n * Determine whether a hostname is in test mode.\n * @param {String} hn\n */\nexport function isTestHostname(hn) {\n  try {\n    const hostname = hn || window.location.hostname;\n    return !!(hostname.match(/localhost/g) || hostname.match(privateIPRegex));\n  } catch (err) {\n    return true;\n  }\n}\n\nexport function isHttps() {\n  try {\n    return window.location.protocol === \"https:\";\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Define the mode of operation (live or test)\n * and the tenant's authentication factors\n */\nexport async function setMode() {\n  try {\n    const { data } = await get(`/tenants/${store.tenantId}/mode`);\n    mode.value = data.mode || \"test\";\n    mode.reason = getReason(mode.value);\n    store.mode = mode.value;\n    setFirstFactors(data.authentication);\n    return data;\n  } catch (err) {\n    mode.value = \"test\";\n    store.mode = mode.value;\n  }\n}\n\n/**\n * Estimate the mode without making an API call\n */\nexport function setModeSync() {\n  const modeValue = isTestHostname() || !isHttps() ? \"test\" : \"live\";\n  mode.value = modeValue;\n  mode.reason = getReason(modeValue);\n  store.mode = modeValue;\n}\n\n/**\n * Set the reason for the mode\n * - http\n * - domain\n */\nfunction getReason(mode) {\n  try {\n    if (mode === \"live\") {\n      return \"domain\";\n    }\n    if (window.location.protocol === \"http:\") {\n      return \"http\";\n    } else if (window.location.protocol !== \"https:\") {\n      return \"protocol\";\n    } else {\n      return \"domain\";\n    }\n  } catch (error) {}\n}\n","/**\n * user methods are refactored into a separate file to avoid a circular dependency\n * between Userfront.refresh() [which requires setUser()]\n * and Userfront.user.update() [which requires refresh()].\n */\nimport { put } from \"./api.js\";\nimport { store } from \"./store.js\";\nimport { refresh } from \"./refresh.js\";\nimport { getTotp } from \"./totp.js\";\nimport { getJwtPayload } from \"./utils.js\";\nimport { updatePassword } from \"./password.js\";\n\n/**\n * Update the user record on Userfront\n * @param {Object} payload User properties to update e.g. { name: 'John Doe' }\n */\nexport async function update(payload) {\n  if (!payload || Object.keys(payload).length < 1) {\n    return console.warn(\"Missing user properties to update\");\n  }\n\n  // Make request to update the user\n  await put(`/self`, payload, {\n    headers: {\n      authorization: `Bearer ${store.tokens.accessToken}`,\n    },\n  });\n\n  // Refresh the access and ID tokens, and set the store.user object from the ID token\n  await refresh();\n\n  return store.user;\n}\n\n/**\n * Determine whether the access token has a given role\n * @param {String} roleName\n * @param {Object} options\n * @returns {Boolean}\n */\nexport function hasRole(roleName, { tenantId } = {}) {\n  try {\n    if (!store.tokens.accessToken || !store.tenantId) {\n      return false;\n    }\n    const { authorization } = getJwtPayload(store.tokens.accessToken);\n    if (!authorization) {\n      return false;\n    }\n    tenantId = tenantId || store.tenantId;\n    if (!authorization[tenantId] || !authorization[tenantId].roles) {\n      return false;\n    }\n    return authorization[tenantId].roles.indexOf(roleName) > -1;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Add the methods to the store.user object\n */\nstore.user.update = update;\nstore.user.hasRole = hasRole;\nstore.user.updatePassword = updatePassword;\nstore.user.getTotp = getTotp;\n","import axios from \"axios\";\nimport { store } from \"./store.js\";\nimport {\n  tokens,\n  accessToken,\n  idToken,\n  setTokensFromCookies,\n  setTokenNames,\n} from \"./tokens\";\nimport { getSession } from \"./session\";\nimport { redirectIfLoggedIn, redirectIfLoggedOut } from \"./url.js\";\nimport { signup } from \"./signup.js\";\nimport { login } from \"./login.js\";\nimport { updatePassword, resetPassword, sendResetLink } from \"./password.js\";\nimport { sendLoginLink } from \"./link.js\";\nimport { sendVerificationCode } from \"./verificationCode\";\nimport { logout } from \"./logout.js\";\nimport { mode, setMode, setModeSync } from \"./mode.js\";\n// import { setIframe } from \"./iframe.js\";\nimport { user } from \"./user.js\";\nimport \"./user.methods.js\";\nimport { refresh } from \"./refresh.js\";\nimport { apiUrl } from \"./constants.js\";\nimport { resetMfa } from \"./authentication.js\";\nimport { setupPkce } from \"./pkce.js\"; \n\nlet initCallbacks = [];\n\n/**\n * Initialize the Userfront library.\n * @param {String} tenantId\n */\nfunction init(tenantId, opts = {}) {\n  if (!tenantId) return console.warn(\"Userfront initialized without tenantId\");\n\n  store.tenantId = tenantId;\n\n  store.baseUrl = opts.baseUrl || apiUrl;\n  if (!store.baseUrl.endsWith(\"/\")) {\n    store.baseUrl += \"/\";\n  }\n\n  if (opts.domain) {\n    store.domain = opts.domain;\n    const url = `https://${store.domain}`;\n    axios.defaults.headers.common[\"x-application-id\"] = url;\n    axios.defaults.headers.common[\"x-origin\"] = url;\n  }\n\n  setTokenNames();\n  // setIframe(); // TODO re-enable when iframe is needed\n  setTokensFromCookies();\n\n  // Estimate the mode synchronously with local data.\n  // Clients that require the true mode or the default\n  // authenticationData should call and await setMode.\n  setModeSync();\n\n  resetMfa();\n\n  setupPkce();\n\n  try {\n    if (initCallbacks.length > 0) {\n      initCallbacks.forEach((cb) => {\n        if (!cb || typeof cb !== \"function\") return;\n        cb({ tenantId });\n      });\n    }\n    initCallbacks = [];\n  } catch (error) {}\n}\n\n/**\n * Add a callback function to be called upon Userfront.init()\n * @param {Function} cb\n */\nfunction addInitCallback(cb) {\n  if (!cb || typeof cb !== \"function\") return;\n  initCallbacks.push(cb);\n}\n\n/**\n\n * Register a window-level event called \"urlchanged\" that will fire\n * whenever the browser URL changes.\n */\nlet isRegistered = false;\nfunction registerUrlChangedEventListener() {\n  if (isRegistered) return;\n  isRegistered = true;\n  try {\n    history.pushState = ((f) =>\n      function pushState() {\n        var ret = f.apply(this, arguments);\n        window.dispatchEvent(new Event(\"pushstate\"));\n        window.dispatchEvent(new Event(\"urlchanged\"));\n        return ret;\n      })(history.pushState);\n\n    history.replaceState = ((f) =>\n      function replaceState() {\n        var ret = f.apply(this, arguments);\n        window.dispatchEvent(new Event(\"replacestate\"));\n        window.dispatchEvent(new Event(\"urlchanged\"));\n        return ret;\n      })(history.replaceState);\n\n    window.addEventListener(\"popstate\", () => {\n      window.dispatchEvent(new Event(\"urlchanged\"));\n    });\n  } catch (error) {}\n}\n\n/**\n * EXPORTS\n */\n\nexport default {\n  // index\n  addInitCallback,\n  init,\n  registerUrlChangedEventListener,\n\n  //logout\n  logout,\n\n  // mode\n  mode,\n  setMode,\n\n  // refresh\n  refresh: (a, b, c) => {\n    try {\n      console.warn(\n        \"Userfront.refresh() is deprecated and will be removed. Please use Userfront.tokens.refresh() instead.\"\n      );\n    } catch (error) {}\n    return refresh(a, b, c);\n  },\n\n  // signon\n  login,\n  resetPassword,\n  updatePassword,\n  sendLoginLink,\n  sendResetLink,\n  sendVerificationCode,\n  signup,\n\n  // store\n  store,\n\n  // tokens\n  tokens,\n  accessToken,\n  idToken,\n\n  // session\n  getSession,\n\n  // url\n  redirectIfLoggedIn,\n  redirectIfLoggedOut,\n\n  // user\n  user,\n\n  // utils\n};\n","import { loginWithPassword } from \"./password.js\";\nimport { loginWithLink, sendPasswordlessLink } from \"./link.js\";\nimport { signonWithSso } from \"./sso.js\";\nimport { loginWithTotp } from \"./totp.js\";\nimport { loginWithVerificationCode } from \"./verificationCode.js\";\nimport { completeSamlLogin } from \"./saml.js\";\n\n/**\n * Log a user in via the provided method. This method serves to call other\n * methods, depending on the \"method\" parameter passed in.\n * @param {String} method\n * @param {Number} userId\n * @param {String} userUuid\n * @param {String} email\n * @param {String} username\n * @param {String} emailOrUsername\n * @param {String} phoneNumber\n * @param {String} password\n * @param {String} token\n * @param {String} uuid\n * @param {String} totpCode\n * @param {String} backupCode\n * @param {String} channel \"sms\" or \"email\"\n * @param {String} verificationCode\n * @param {String} redirect - do not redirect if false, or redirect to given path\n */\nexport async function login({\n  method,\n  // User identifiers\n  userId,\n  userUuid,\n  email,\n  username,\n  emailOrUsername,\n  phoneNumber,\n  // Password\n  password,\n  // Link\n  token,\n  uuid,\n  // Totp\n  totpCode,\n  backupCode,\n  // Verification code\n  channel,\n  verificationCode,\n  // Other\n  redirect,\n  options,\n} = {}) {\n  if (!method) {\n    throw new Error('Userfront.login called without \"method\" property.');\n  }\n  switch (method) {\n    case \"apple\":\n    case \"azure\":\n    case \"facebook\":\n    case \"github\":\n    case \"google\":\n    case \"linkedin\":\n      return signonWithSso({ provider: method, redirect });\n    case \"password\":\n      return loginWithPassword({\n        email,\n        username,\n        emailOrUsername,\n        password,\n        redirect,\n        options,\n      });\n    case \"passwordless\":\n      return sendPasswordlessLink({ email });\n    case \"link\":\n      return loginWithLink({ token, uuid, redirect });\n    case \"totp\":\n      return loginWithTotp({\n        totpCode,\n        backupCode,\n        userId,\n        userUuid,\n        emailOrUsername,\n        email,\n        username,\n        phoneNumber,\n        redirect,\n      });\n    case \"verificationCode\":\n      return loginWithVerificationCode({\n        channel,\n        email,\n        phoneNumber,\n        verificationCode,\n        redirect,\n      });\n    case \"saml\":\n      return completeSamlLogin();\n    default:\n      throw new Error('Userfront.login called with invalid \"method\" property.');\n  }\n}\n","import { get } from \"./api.js\";\nimport { store } from \"./store.js\";\nimport { throwFormattedError } from \"./utils.js\";\n\nexport async function completeSamlLogin() {\n  try {\n    if (!store.tokens.accessToken) {\n      return console.warn(\"Cannot complete SAML login without access token\");\n    }\n\n    const { data } = await get(`/auth/saml/idp/token`, {\n      headers: {\n        authorization: `Bearer ${store.tokens.accessToken}`,\n      },\n    });\n\n    window.location.assign(\n      `${store.baseUrl}auth/saml/idp/login?tenant_id=${store.tenantId}&token=${data.token}&uuid=${store.user.userUuid}`\n    );\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n","import { signupWithPassword } from \"./password.js\";\nimport { signonWithSso } from \"./sso.js\";\nimport { sendPasswordlessLink } from \"./link.js\";\nimport { sendVerificationCode } from \"./verificationCode.js\";\n\n/**\n * Register a user via the provided method. This method serves to call other\n * methods, depending on the \"method\" parameter passed in.\n * @param {String} method\n * @param {String} email\n * @param {String} username\n * @param {String} phoneNumber\n * @param {String} name\n * @param {Object} data - Object for custom user fields\n * @param {String} password\n * @param {String} channel \"sms\" or \"email\"\n * @param {String} redirect - do not redirect if false, or redirect to given path\n */\nexport async function signup({\n  method,\n  email,\n  username,\n  phoneNumber,\n  name,\n  data,\n  password,\n  channel,\n  redirect,\n} = {}) {\n  if (!method) {\n    throw new Error('Userfront.signup called without \"method\" property.');\n  }\n  switch (method) {\n    case \"apple\":\n    case \"azure\":\n    case \"facebook\":\n    case \"github\":\n    case \"google\":\n    case \"linkedin\":\n      return signonWithSso({ provider: method, redirect });\n    case \"password\":\n      return signupWithPassword({\n        username,\n        name,\n        email,\n        password,\n        userData: data,\n        redirect,\n      });\n    case \"passwordless\":\n      return sendPasswordlessLink({ email, name, username, userData: data });\n    case \"verificationCode\":\n      return sendVerificationCode({\n        channel,\n        email,\n        phoneNumber,\n        name,\n        username,\n        data,\n      });\n    default:\n      throw new Error(\n        'Userfront.signup called with invalid \"method\" property.'\n      );\n  }\n}\n"],"names":["store","user","tokens","mode","getJwtPayload","token","split","replace","JSON","parse","atob","encodedPayload","error","console","isJwtLocallyValid","payload","Date","exp","throwFormattedError","Error","response","data","message","reduceSlashes","str","put","path","options","url","baseUrl","axios","e","Promise","reject","post","get","setCookie","value","type","cookieName","tenantId","secure","sameSite","Cookies","set","name","paths","domains","window","location","pathname","hostname","primaryDomain","slice","join","undefined","err","map","domain","remove","removeCookie","accessTokenName","idTokenName","refreshTokenName","accessToken","idToken","refreshToken","attr","unsetUser","access","cookieOptions","id","refresh","setTokensFromCookies","body","recover","result","then","exchange","resolve","_temp","_catch","headers","authorization","status","setCookiesAndTokens","basicRefresh","warn","tokenName","setUser","idTokenPayload","propsToDefine","prop","isAccessTokenLocallyValid","authenticationData","firstFactors","secondFactors","firstFactorToken","handleMfaRequired","isMfaRequired","authentication","clearMfa","getMfaHeaders","getSession","getIsLoggedIn","isLoggedIn","needsSecondFactor","resetMfaState","getQueryAttr","attrName","href","indexOf","decodeURIComponent","handleRedirect","redirect","redirectToPath","redirectTo","pathOrUrl","document","createElement","el","assign","hash","search","codeChallenge","localStorage","removeItem","usePkce","code_challenge","redirectWithPkce","authorizationCode","_url","searchParams","clearPkceDataFromLocalStorage","updatePasswordWithJwt","password","existingPassword","Authorization","updatePasswordWithLink","uuid","updatePassword","method","resetPassword","signonWithSso","provider","getProviderLink","origin","encodeURIComponent","sendPasswordlessLink","email","username","userData","enforceChannel","channel","phoneNumber","sendVerificationCode","res","privateIPRegex","setMode","setFirstFactors","reason","getReason","Array","isArray","setModeSync","modeValue","isTestHostname","hn","match","isHttps","protocol","update","Object","keys","length","hasRole","roleName","roles","getTotp","_exit2","_temp4","_result3","_temp3","initCallbacks","isRegistered","addInitCallback","cb","push","init","opts","endsWith","defaults","common","codeChallengeFromQueryParams","expiresAt","now","setItem","writePkceDataToLocalStorage","getItem","parseInt","readPkceDataFromLocalStorage","codeChallengeFromLocalStorage","setupPkce","forEach","registerUrlChangedEventListener","history","pushState","f","ret","apply","this","arguments","dispatchEvent","Event","replaceState","addEventListener","logout","_temp2","userUuid","completeSamlLogout","removeAllCookies","a","b","c","login","userId","emailOrUsername","totpCode","backupCode","verificationCode","noResetEmail","params","getPkceRequestQueryParams","hasOwnProperty","_exit","loginWithPassword","loginWithLink","loginWithTotp","loginWithVerificationCode","completeSamlLogin","sendLoginLink","sendResetLink","signup","signupWithPassword","redirectIfLoggedIn","tenant","loginRedirectPath","redirectIfLoggedOut"],"mappings":"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"}